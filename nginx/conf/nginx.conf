worker_processes 1;
daemon off;

events {
    worker_connections 1024;
}

env SRV_TTL;                                                    # <---- for use of evn-variables

http {


    lua_code_cache off;
    access_log /dev/tty;
    error_log /dev/tty debug;


    lua_shared_dict srv_proxy_cache 2m;                           # <-----
    server {
        location /api/a-backend {

            set $srv_resolvers "8.8.8.8 127.0.0.1 192.168.2.6:8600";  # <-----
            set $srv_service "_a-backend._http.service.consul";       # <-----

            set $srv_strategy "round_robin";                          # Optional, round_robin, random, ip_hash
            set $srv_dns_protocol "udp";                              # Optional, udp or tcp
            set $srv_dns_timeout 200;                                 # Optional, in ms
            set $srv_dns_retrys 2;                                    # Optional, number of retrys if timeout exp.
            set $srv_http_timeout 500;                                # Optional, in ms
            set $srv_proxy_timeout 2000;                              # Optional, in ms
            set_by_lua $srv_ttl 'return os.getenv("SRV_TTL")';        # Optional, example of using env. ttl in secounds, default 60


            rewrite /api/a-backend/(.*) /$1  break;

            content_by_lua "
                     local proxy = require 'modfin.srv_proxy'                              
                     proxy.set('resolvers', ngx.var.srv_resolvers)
                                                         
                     proxy.set('strategy', ngx.var.srv_strategy)
                     proxy.set('dns_protocol', ngx.var.srv_dns_protocol)
                     proxy.set('dns_timeout', ngx.var.srv_dns_timeout)
                     proxy.set('dns_retrys', ngx.var.srv_dns_retrys)
                     proxy.set('http_timeout', ngx.var.srv_http_timeout)
                     proxy.set('proxy_timeout', ngx.var.srv_proxy_timeout)
                     proxy.set('ttl', tonumber(ngx.var.srv_ttl)
                     
                     proxy.pass(ngx.var.srv_service)                                      
      ";


        }
        listen 80;
    }
}
